{"version":3,"sources":["ng://aaf-grid/lib/aaf-grid.service.ts","ng://aaf-grid/lib/aaf-grid.component.ts","ng://aaf-grid/lib/material.module.ts","ng://aaf-grid/lib/aaf-grid.module.ts"],"names":["AafGridService","Injectable","args","providedIn","AafGridComponent","prototype","isObj","columnName","returnObj","this","objectColumn","length","map","val","key","name","ngOnInit","displayedColumns","config","finalDynamicDisplayColumns","checkBoxFunction","functionalityCheckBox","columns","columnData","filterInfo","customFilters","actionInfo","actionAttr","listingType","configurationFor","itemPerPage","listHeader","dataSourceInfo","sourceDataInfo","rootClasses","backEvent","backInfo","action","doFilter","searchAction","listActions","actionProvider","diffrentiateAssignKits","paginationObj","size","pageSize","page","pageNo","getListData","handleRedirection","event","preparedArray","push","redirection","target","value","router","navigate","handleActions","actionName","actionRow","actionValue","row","dataInfo","prepareFirstPagePagination","onSubmit","filterData","formUserId","userId","pagingInfo","_this","ngxService","start","queryDataObj","fiterData","pageInfo","dataProvider","getData","subscribe","resp","stop","data","MatTableDataSource","result","rows","totalCount","totalRows","pageIndex","refreshConfiguration","err","alert","onPageChange","pageEvent","getDataSource","dataSource","finalKitDataSource","Array","sort","selection","SelectionModel","advanceSearch","advancedSearch","advanceFilter","backToDashboard","location","back","kitFilters","assignedKitFilters","isAllSelected","selected","masterToggle","clear","forEach","select","checkboxLabel","isSelected","position","Component","selector","template","Location","Router","NgxUiLoaderService","Input","ViewChild","MatPaginator","MatSort","MaterialModules","NgModule","imports","CommonModule","MatToolbarModule","MatButtonModule","MatCardModule","MatInputModule","MatDialogModule","MatTableModule","MatMenuModule","MatIconModule","MatProgressSpinnerModule","MatGridListModule","MatPaginatorModule","MatSelectModule","MatSnackBarModule","MatDatepickerModule","MatCheckboxModule","MatSortModule","MatFormFieldModule","MatDividerModule","MatTooltipModule","MatAutocompleteModule","MatRadioModule","MatMomentDateModule","MatListModule","MatOptionModule","MatTabsModule","MatButtonToggleModule","MatChipsModule","MatExpansionModule","MatRippleModule","MatSidenavModule","MatSliderModule","exports","AafGridModule","declarations","FormsModule","ReactiveFormsModule","NgxUiLoaderModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AafGridService {\n\n  constructor() { }\n}\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator,PageEvent } from '@angular/material/paginator';\nimport { Router } from '@angular/router';\nimport { AafGridDataProvider } from './aaf-grid-data-provider';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { ActionsProvider } from './actions-provider';\n\n\n@Component({\n  selector: 'aaf-grid',\n  templateUrl: './aaf-grid.component.html',\n  styleUrls: ['./aaf-grid.component.css']\n})\nexport class AafGridComponent<T> implements OnInit {\n\n  // All the configuration need to pass in Config variable \n  @Input() config: any;\n  // All the Data Source need to pass as in DataProvider Form\n  @Input() dataProvider: AafGridDataProvider<T>;\n  // Here we are definng all the action Providers\n  @Input() actionProvider: ActionsProvider;\n\n  displayingColumns: any;\n  displayingDataSource: any;\n  displayedColumns: string[];\n  data: any;\n  selection: any;\n  columns: any;\n  checkBoxFunction: boolean = false;\n  actionInfo: any;\n  filterInfo: any;\n  itemPerPage: any;\n  listingType: any;\n  listHeader: any;\n  advancedSearch: boolean = true;\n  advanceFilter: boolean = false;\n  diffrentiateAssignKits: boolean = false;\n  dataSourceInfo: any;\n  rootClasses: any;\n  paginationObj = {\n    totalCount: 0,\n    pageNo: 0,\n    pageSize: 10\n  }\n  listActions: any;\n  // For Angular Pagination we need ref of MatPaginator\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  // For Angular Sorting we need ref of MatSort\n  @ViewChild(MatSort) sort: MatSort;\n  pageEvent: PageEvent;\n\n  // Event Handlers pass from Configuration will going to assign on these defined variables\n  backEvent: any;\n  doFilter: any;\n  deleteAssignedKit: any;\n  kitNumber: any;\n  formUserId: any;\n  objectColumn: any;\n  constructor(\n    private location: Location,\n    private router: Router,\n    private ngxService: NgxUiLoaderService\n  ) {\n\n  }\n\n  // Return boolean to check Object type \n  isObj(columnName) {\n    let returnObj = false;\n    if (this.objectColumn.length > 0) {\n      this.objectColumn.map((val, key) => {\n        if (val.name == columnName) {\n          returnObj = true;\n        }\n      });\n    }\n    return returnObj;\n  }\n  // At initilizing time set configuration also set data source\n  ngOnInit() {\n    this.displayedColumns = this.config.finalDynamicDisplayColumns;\n    this.checkBoxFunction = this.config.functionalityCheckBox;\n    this.columns = this.config.columnData;\n    this.filterInfo = this.config.customFilters;\n    this.actionInfo = this.config.actionAttr;\n    this.listingType = this.config.configurationFor;\n    this.itemPerPage = this.config.itemPerPage;\n    this.listHeader = this.config.listHeader;\n    this.dataSourceInfo = this.config.sourceDataInfo;\n    this.rootClasses = this.config.rootClasses;\n    // All Events need to asign here\n    this.backEvent = this.listHeader.backInfo.action;\n    this.doFilter = this.filterInfo.searchAction;\n    this.listActions = this.actionProvider;\n    this.objectColumn = this.config.objectColumn;\n\n    if ((this.listingType == 'usersData') || (this.listingType == 'users') || (this.listingType == 'role'))\n      this.diffrentiateAssignKits = true\n    else\n      this.diffrentiateAssignKits = false\n\n    // We require dataSource here So we need to call getListData function from ngOnIt\n    let paginationObj = { size: this.paginationObj.pageSize, page: this.paginationObj.pageNo };\n    this.getListData({}, paginationObj);\n  }\n  // For redirection \n  handleRedirection(event) {\n    let preparedArray = [];\n    preparedArray.push('/');\n    this.config.customFilters.redirection.map(val => {\n      preparedArray.push(val);\n    });\n    if (event.target.value != '') {\n      preparedArray.push(event.target.value);\n    }\n    this.router.navigate(preparedArray);\n  }\n  // Take caring of all actions\n  handleActions(actionName?: any, actionRow?: any, actionValue?: any) {\n    let actionInfo = { row: actionRow, dataInfo: actionValue };\n    this.listActions[actionName](actionInfo);\n  }\n  // Prepare Pagination Obj\n  prepareFirstPagePagination() {\n    return { size: this.paginationObj.pageSize, page: this.paginationObj.pageNo };\n  }\n  // On SUbmit of All Filters\n  onSubmit(filterData: any) {\n    if (this.formUserId) {\n      filterData.userId = this.formUserId;\n    }\n    this.getListData(filterData, this.prepareFirstPagePagination());\n  }\n  // Call to Fetch Data commonly\n  getListData(filterInfo?: any, pagingInfo?: any) {     \n    this.ngxService.start();\n    let queryDataObj = { 'fiterData': filterInfo, 'pageInfo': pagingInfo };\n    this.dataProvider.getData(queryDataObj).subscribe(\n      resp => {                \n        this.ngxService.stop();\n        this.data = new MatTableDataSource(resp.result.rows);\n        this.paginationObj.totalCount = resp.result.totalRows;\n        this.paginationObj.pageSize = resp.result.pageSize;\n        this.paginationObj.pageNo = resp.result.pageIndex;\n        this.refreshConfiguration();        \n      },\n      err => {\n        alert('Something went wrong...');\n      },\n      ()=>{\n        this.ngxService.stop();\n      }\n    );\n  }\n  // On Page Change Event\n  onPageChange(pageEvent?: PageEvent) {\n    this.paginationObj = {\n      totalCount: pageEvent.length,\n      pageNo: pageEvent.pageIndex,\n      pageSize: pageEvent.pageSize\n    }\n    this.getListData({}, this.prepareFirstPagePagination());\n    return pageEvent;\n  }\n  // Prepare DataSource in the Array as per the Listing requirment\n  getDataSource(dataSource: any) {\n    this.paginationObj.totalCount = dataSource.length;\n    let finalKitDataSource = new Array();\n    finalKitDataSource['dataSource'] = dataSource;\n    return finalKitDataSource;\n  }\n  // Do refresh all the Listing configuration\n  refreshConfiguration() {\n    this.data.sort = this.sort;\n    this.selection = new SelectionModel(true, []);\n    // All Events need to asign here\n    this.backEvent = this.listHeader.backInfo.action;    \n  }\n  // Advance Search button\n  advanceSearch() {\n    this.advancedSearch = true;\n    this.advanceFilter = !this.advanceFilter;\n  }\n  // Back to Dashboard page\n  backToDashboard() {\n    this.location.back();\n  }\n  // Kit Filtering Action\n  kitFilters() {\n    this.getListData();\n  }\n  // Assigned Kit Filter Action\n  assignedKitFilters() {\n    this.getListData();\n  }\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.data.data.length;\n    return numSelected === numRows;\n  }\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.data.data.forEach(row => this.selection.select(row));\n  }\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport { MatMomentDateModule } from \"@angular/material-moment-adapter\";\r\n\r\nimport {\r\n  MatSortModule, \r\n  MatButtonModule,\r\n  MatCardModule, \r\n  MatDialogModule, \r\n  MatInputModule,\r\n  MatToolbarModule, \r\n  MatMenuModule, \r\n  MatIconModule, \r\n  MatProgressSpinnerModule, \r\n  MatGridListModule, \r\n  MatPaginatorModule,\r\n  MatFormFieldModule,\r\n  MatDividerModule,\r\n  MatTooltipModule,\r\n  MatListModule,\r\n  MatOptionModule,\r\n  MatTabsModule,\r\n  MatButtonToggleModule,\r\n  MatChipsModule,   \r\n  MatExpansionModule,      \r\n  MatRippleModule,    \r\n  MatSidenavModule,\r\n  MatSliderModule\r\n} from '@angular/material'; //MAT_DIALOG_DEFAULT_OPTIONS\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatDialogModule,\r\n    MatTableModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatGridListModule,\r\n    MatPaginatorModule,\r\n    MatSelectModule,\r\n    MatSnackBarModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSortModule,\r\n    MatFormFieldModule,\r\n    MatDividerModule,\r\n    MatTooltipModule,\r\n    MatAutocompleteModule,\r\n    MatRadioModule,\r\n    MatMomentDateModule,\r\n    MatListModule,\r\n    MatOptionModule,\r\n    MatTabsModule,\r\n    MatButtonToggleModule,\r\n    MatChipsModule,   \r\n    MatExpansionModule,      \r\n    MatRippleModule,    \r\n    MatSidenavModule,\r\n    MatSliderModule\r\n    //MAT_DIALOG_DEFAULT_OPTIONS\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatDialogModule,\r\n    MatTableModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatGridListModule,\r\n    MatPaginatorModule,\r\n    MatSelectModule,\r\n    MatSnackBarModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSortModule,\r\n    MatFormFieldModule,\r\n    MatDividerModule,\r\n    MatTooltipModule,\r\n    MatAutocompleteModule,\r\n    MatRadioModule,\r\n    MatMomentDateModule,\r\n    MatListModule,\r\n    MatOptionModule,\r\n    MatTabsModule,\r\n    MatButtonToggleModule,\r\n    MatChipsModule,   \r\n    MatExpansionModule,      \r\n    MatRippleModule,    \r\n    MatSidenavModule,\r\n    MatSliderModule\r\n    //MAT_DIALOG_DEFAULT_OPTIONS\r\n  ],\r\n}) \r\nexport class MaterialModules { }\r\n\r\n","import { AafGridComponent } from './aaf-grid.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModules } from  './material.module';\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\nimport { NgxUiLoaderModule } from 'ngx-ui-loader';\n\n\n@NgModule({\n  declarations: [AafGridComponent],\n  imports: [\n  CommonModule,\n    MaterialModules,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxUiLoaderModule\n  ],\n  exports: [AafGridComponent]\n})\nexport class AafGridModule { }\n"]}